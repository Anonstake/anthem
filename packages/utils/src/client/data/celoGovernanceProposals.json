{
  "celoGovernanceProposals": {
    "queuedProposals": [],
    "approvalProposals": [],
    "referendumProposals": [
      {
        "proposalID": 11,
        "index": 1,
        "currentBlockNumber": 3055130,
        "stage": "Referendum",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "yesVotes": 0,
        "noVotes": 0,
        "abstainVotes": 0,
        "proposalEpoch": 1602710513,
        "referendumEpoch": 1602796913,
        "executionEpoch": 1603228913,
        "expirationEpoch": 1603488113,
        "queuedAtBlockNumber": 3007258,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1602611148,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0011.md",
        "title": "Increase the gasLimit to 13M",
        "description": "# CGP [0011]: Increase the gasLimit to 13M\n\n- Date: 2020-09-23\n- Author(s): @nambrot\n- Status: REJECTED (typo in parameter)\n- Governance Proposal ID #: [if submitted]\n- Date Executed: [if executed]\n\n## Overview\n\nThis proposal sets the block gas limit parameter of the Celo blockchain to 13M from 10M. This change is necessary to accomodate the contract deploy of Celo core smart contracts in the upcoming first upgrade.\n\nAt genesis, the block gas limit was actually 20M to accomodate the initial deploy as well. After the deploy of the Celo core smart contracts, the block gas limit was set down to a more conservative 10M to ensure that block space does not become a disruptive factor for consensus. Since then, Javier Corteso (@jcortejoso) and Kevin Jue (@kevjue) have conducted some load-testing to determine whether raising the block gas limit is indeed safe (read more in the Testing section).\n\nA side-effect of this proposal is the increase of transaction throughput by way of the increased block space by 30% since more computation and thus transactions can take place in a block.\n\n## Proposed Changes\n\n1. Increase the block gas limit parameter\n  - Destination: Call `setBlockGasLimit` on the `BlockchainParameters` smart contract owned by `Governance`\n  - Data: 13 000 0000 (13 Million)\n  - Value: 0 (NA)\n\n## Testing\n\nTo check and validate the performance of the networks under high pressure of gas consumption, a Celo testnet was deployed with the following parameters:\n\n- Running validators: 100\n- Elected validators: 100\n- Proxied validators: 75\n- Block time: 5 seconds\n- Epoch: Each 500 blocks\n- Celo-blockchain version: 1.0.1\n- Celo-monorepo (protocol) version: a049b200c7a7972463f2d088ec274d0fd1a4b32d\n- Validator resources: CPU = 4 cores; Memory = 10Gbi\n- Proxy resources: CPU = 4 cores; Memory = 10Gbi\n\nThe load transactions were generated as token transfers, transfering different tokens and also using different currencies for paying the transaction fees.\n\nWith a block gas limit of 17M and an equal constant load of 17M, the testnet was running for 6 hours and 45 minutes, with an average block time of 6.48 seconds. There were not any major stall of the network and the only issue observed was the duration of some epoch block, which took around 2-3 minutes.\n\nAfter reducing the block gas limit to 13M and the block gas consumption to keep it close to 13M, the testnet was running for 10 hours, without observing any major issue, being the average block time of 5.6 seconds and most of the epoch block duration around 2 minutes. We can explain the deviation from the 5 seconds block time due to the block duration for epoch and epoch+1 blocks.\n\nIn the view of the results obtained after the testing, we can reach the conclusion that the network can handle an increament on the gas block limit to 13M without notoriously impacting the average block time.\n\n## Verification\n\nTODO: Add confirmation commands once proposal is live\n\n## Risks\n\n- While metrics in the testing environment indicated that consensus and block production remain within expected bounds, generally speaking, increases in block space mean higher computational needs which could impact consensus and block production under adversarial conditions that were not tested.\n- Increasing the block space could lead to a quicker growth of chain state which in the long run makes running full nodes more resource-intenstive and could affect decentralization adversely.\n\n## Useful Links\n\n* [Block gas limit entry in the genesis block](https://github.com/celo-org/celo-monorepo/blob/master/packages/celotool/genesis_rc1.json#L23)\n"
      }
    ],
    "executionProposals": [],
    "expiredProposals": [
      {
        "proposalID": 1,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": true,
        "queuedAtBlockNumber": 91471,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1588031167,
        "gist": "https://gist.github.com/aslawson/a1f693f0e4c5fd391eac463237c4182a",
        "title": "Enable validator elections, epoch rewards and carbon offsetting",
        "description": "# CGP [0001]: Enable validator elections, epoch rewards and carbon offsetting\n\n- Date: 2020-04-27\n- Author: @aslawson\n- Status: EXECUTED\n- Governance Proposal ID #: 2\n- Date Executed: 2020-05-01\n\nNA -- Do not use this as an exxample GCP.  This was generated retroactively before this process was defined and proposal details for this governance proposal can be found [here](https://gist.github.com/aslawson/a1f693f0e4c5fd391eac463237c4182a)."
      },
      {
        "proposalID": 2,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": true,
        "queuedAtBlockNumber": 381386,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1589480751,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0001.md",
        "title": "Unfreeze Voter Rewards",
        "description": "# CGP [0002]: Unfreeze Voter Rewards\n\n- Date: 2020-05-12\n- Author: @aslawson\n- Status: EXECUTED\n- Governance Proposal ID #: 2\n- Date Executed: 2020-05-18\n\n## Overview\n\nThis change unfreezes voter rewards by setting the target voting yield in the EpochRewards smart contract. Currently target voting yield is 0 so the voter rewards are 0.  Once this value is set >0, voters will begin receiving rewards.  This provides incentive for users to maintain stake in the network and vote for validators they feel provide benefit to the network.\n\nWith this activation, the voter yield will be static as the adjustmentFactor will remain at 0.  The adjustmentFactor indicates the value to dynamically adjust the voting yield in response to the actual and target percentage of voting Celo Gold.  Given voter rewards are disabled right now, the current percentage of voting Celo Gold is likely lower than expected in steady state. In a later governance proposal, the adjustmentFactor will be set to enable this dynamic voting yield adjustment.  \n\nChanges in parameters:\n\n- targetVotingYieldParams.target: 0 --> 0.00016 ((x + 1) ^ 365 = 1.06)\n\nThis represents a value that will return 6% annual growth for voter rewards (as currently epoch rewards are distributed daily).  This was selected as a value that would be competitive with other proof-of-stake protocol yields and still be sustainable.\n\n## Proposed Changes\n\n1. Set Target Voting Yield\n  - Destination: EpochRewards, [setTargetVotingYield](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/governance/EpochRewards.sol#L271)\n  - Data: 160000000000000000000 (0.00016 * 10^24)\n  - Value: 0 (NA)\n\n## Verification\n\n1. Confirm proposal steps: run `celocli governance:view --proposalID 2`\n\n### Post-Execution Verification\n\n1. Check that voting accounts locked gold increases after one epoch.  You can do so by running CeloCli tooling for [election:show](https://docs.celo.org/command-line-interface/election#show) or [lockedGold:show](https://docs.celo.org/command-line-interface/lockedgold#show_).\n2. Check EpochReward values for [TargetVotingYieldParameters](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/governance/EpochRewards.sol#L52)\n\n## Risks\n\nLow risk -- if parameters were incorrect it could result in unexpectedly high or low voting yield, but risk is mitigated by capping at the max value 1.20 (20% annual growth).\n\n## Useful Links\n\n- [Rewards for Locked Gold Holders](https://docs.celo.org/celo-codebase/protocol/proof-of-stake/epoch-rewards/locked-gold-rewards)\n"
      },
      {
        "proposalID": 3,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": true,
        "queuedAtBlockNumber": 381439,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1589481016,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0002.md",
        "title": "Unfreeze Celo Gold Transfers",
        "description": "# CGP [0003]: Unfreeze Celo Gold Transfers\n\n- Date: 2020-05-12\n- Author(s): @aslawson\n- Status: EXECUTED\n- Governance Proposal ID #: 3\n- Date Executed: 2020-05-18\n\n## Overview\n\nThis change unfreezes Celo Gold transfers by removing the GoldToken smart contract from the Freezer contract's `isFrozen` map.\n\n## Proposed Changes\n\n1. Remove GoldToken smart contract from the Freezer\n  - Destination: Freezer, [unfreeze](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/common/Freezer.sol#L27)\n  - Data: 0x471EcE3750Da237f93B8E339c536989b8978a438 (GoldToken Address)\n  - Value: 0 (NA)\n\n## Verification\n\n1. Confirm proposal steps: run `celocli governance:view --proposalID 3`\n2. Confirm GoldToken address: run `celocli network:contracts`\n\n### Post-Execution Verification\n\n1. Check that a (non-whitelisted) account can transfer celo gold to another (non-whitelisted) account.  You can do so by running CeloCli tooling for [transfer:gold](https://docs.celo.org/command-line-interface/transfer#gold)\n2. Check Freezer [isFrozen map](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/common/Freezer.sol#L9) no longer contains the GoldToken Address.\n\n## Risks\n\nLow risk, if unsuccessful there is no change to the network.\n\n## Useful Links\n\n- NA\n"
      },
      {
        "proposalID": 4,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0x351aebcded9240ae77dd0a3987e2110b15e0f038",
        "executed": true,
        "queuedAtBlockNumber": 749447,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1591321252,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0003.md",
        "title": "Rename Celo Gold to Celo Native Asset",
        "description": "# CGP [0004]: Rename Celo Gold to Celo Native Asset\n\n- Date: 2020-06-04\n- Author(s): @JamesCowling\n- Status: EXECUTIED\n- Governance Proposal ID #: 4\n- Date Executed: [if executed]\n\n## Overview\n\nThis proposal decrees that the name 'Celo Gold' be discontinued and that the\nCelo native asset be officially referred to as simply the 'Celo native asset'.\nThe shortened name Celo (CELO) will be used as ticker symbol and in casual\nparlance.\n\nThe name Celo Gold could be confusing since it doesn't relate to the price of\ngold. There will likely be multiple Celo stablecoins with names like Celo\nDollar, Celo Euro and Celo Peso one day and potentially even a Celo Gold\nstablecoin.\n\nEven despite the potential naming collision, the gold metaphor doesn't\nadequately represent the properties of the native Celo asset, which include\nstaking and voting on governance.\n\nThe name 'Celo' casts a clear distinction between the native asset and the\nsuite of stablecoins that will develop over time.\n\nIt is important to establish appropriate naming now while it's early in the\nlife of the ecosystem.\n\n## Proposed Changes\n\nThis proposal does not dictate specific transactions or code changes since these\nwill have to roll out over time. It instead establishes the new naming\nin principal and can be subsequently acted upon by Celo contributors. These\nchanges will span the Celo documentation and marketing, as well as the Celo\ncodebase where appropriate.\n\nNote that it will likely not be feasible to exhaustively remove all references\nto Gold in the Celo codebase. This is deemed as acceptable given that this\ncomplexity is levied on developers who are familiar with the ecosystem and not\nthe general public.\n\nNote that the [BIP-0044 ticker symbol for Celo](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)\nwill need to be changed.\n\n### Usage guidelines\n\n- While the name Celo should be capitalized as a proper noun when used outside\n  of code/tooling, it's acceptable to use a lowercase 'native asset' in the\n  long-form name.\n- Alternative long-form names such as 'Celo reserve token' or 'Celo staking\n  asset' should be avoided.\n- The shortened form should be referred to as Celo in both singular and plural\n  form, e.g., 'what's the price of Celo?' 'I'm staking some Celo on your group.'\n- The recommended abbreviation and ticker symbol for Celo will be CELO.\n\n## Verification\n\nThis proposal itself involves no code changes or verification.\n\n## Risks\n\n- There could be a risk of confusion between the shortened form referring to\n  both the ecosystem and the native asset. In contexts where the distinction is\n  insufficiently clear the long-form name should be used.\n- Some refactoring may be too difficult, especially attempting to rename the\n  `LockedGold` and `ReleaseGold` smart contracts. These will likely remain\n  referred to as gold within the codebase.\n- The name change will introduce some thrash and require renaming on exchanges\n  but the earlier this is proposed the fewer exchanges that will need to be\n  updated.\n\n## Useful Links\n\n- [Original blog post arguing for the name change](https://medium.com/@censusworks/why-we-should-rename-celo-gold-35b04d87e95a)\n"
      },
      {
        "proposalID": 5,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": false,
        "queuedAtBlockNumber": 866676,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1591907429,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0004.md",
        "title": "Setting Frozen Part of Reserve CELO",
        "description": "# CGP [0005]: Setting Frozen Part of Reserve CELO\n\n- Date: 2020-06-11\n- Author(s): @MarkusBerlin, @rcroessmann, @aslawson\n- Status: EXPIRED\n- Governance Proposal ID #: 5\n- Date Executed: NA\n\nNA -- Expired.  See GCP #0006"
      },
      {
        "proposalID": 6,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": true,
        "queuedAtBlockNumber": 886135,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1592004724,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0004.md",
        "title": "Setting Frozen Part of Reserve CELO",
        "description": "# CGP [0006]: Setting Frozen Part of Reserve CELO\n\n- Date: 2020-06-11\n- Author(s): @MarkusBerlin, @rcroessmann, @aslawson\n- Status: EXECUTIED\n- Governance Proposal ID #: 6\n- Date Executed: [if executed]\n\n## Overview\nThis change sets the frozen CELO (formerly known as Celo Gold, i.e. cGLD) parameters in the reserve.\n\nChanges in parameters:\n\n- frozenReserveGoldStartBalance: 0 --> 80000000000000000000000000\n- frozenReserveGoldDays: 0 --> 548 (approx. 365 * 1.5 = 18 months)\n\nTo help stabilize the value of Celo stabilized assets, the protocol is supported by a component called a reserve. The reserve consists of a basket of cryptocurrencies that helps the protocol to reduce the supply of Celo Dollars (cUSD).\n\nThe total amount of CELO allocated to the reserve is 120m. The current target allocation for the reserve is 50% CELO, 30% BTC, 15% ETH, and 5% DAI. The reserve will reach this target over time, and this target allocation can be changed through governance. You can find more information [here](https://medium.com/celoorg/the-celo-reserve-faqs-f3f7cbb1991f). \n\nThe initial frozen CELO amount will be 80m (`frozenReserveGoldStartBalance`) which leaves about 40m initially unfrozen. 50% of the unfrozen CELO will be transferred to a reserve custodian account early on (respecting the 5% daily spending limit) to have it readily available for diversifying into the other reserve assets.\n\nTo not put too much selling pressure on CELO, the rebalancing will happen gradually.  This is enforced by unfreezing the 80m frozen CELO linearly over the course of 18 months (`frozenReserveGoldDays`).  This begins starting from the day that this proposal is executed.\n\n\n## Proposed Changes\n\n1. Set Reserve Frozen Gold Parameters\n - Destination: Reserve, [setFrozenGold](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/stability/Reserve.sol#L153)\n - Data: 80000000000000000000000000 (80,000,000 * 10^18), 548\n - Value: 0 (NA)\n\n## Verification\n\n1. Confirm proposal steps: run `celocli governance:view --proposalID 6`\n\n### Post-Execution Verification\n\n1. Check Reserve values for [frozenReserveGoldStartBalance](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/stability/Reserve.sol#L44), [frozenReserveGoldStartDay](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/stability/Reserve.sol#L45), [frozenReserveGoldDays](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/stability/Reserve.sol#L46)\n\n## Risks\n\n- At launch of the protocol, 120m CELO were allocated to the Celo reserve which currently make up a large percentage of the total Celo reserve value. Freezing part of that reserve CELO via this proposal is intended to allow bootstrapping the non-CELO Celo reserve in a controlled way over an extended period of time thereby reducing the risk of sharp increases of floating CELO supply.\n- Freezing CELO reduces the amount of available reserve assets early on.  This could enhance the risk that occurs when a demand decrease for stablecoins (cUSD) exceeds the total value of the (now reduced) exchangeable assets in the reserve.\n\n## Useful Links\n\n* [Stability WhitePaper](https://celo.org/papers/Celo_Stability_Analysis.pdf)\n* [The Celo Reserve FAQs](https://medium.com/celoorg/the-celo-reserve-faqs-f3f7cbb1991f). \n"
      },
      {
        "proposalID": 7,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": true,
        "queuedAtBlockNumber": 1088922,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1593018668,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0007.md",
        "title": "Enabling Celo Dollar transfers and activating the stability protocol",
        "description": "# CGP [0007P]: Enabling Celo Dollar transfers and activating the stability protocol\n\n- Date: 2020-06-24\n- Author(s): @MarkusBerlin, @rcroessmann, @aslawson\n- Status: EXECUTIED\n- Governance Proposal ID #: 7\n- Date Executed: [if executed]\n\n## Overview\n\nEnabling Celo Dollar transfers and the stability protocol:\nThis change activates the Celo stability protocol by unfreezing the Exchange and StableToken contracts, effectively enabling Celo Dollar (cUSD) transfers and allowing cUSD/CELO trades with the reserve via the exchange contract. It does this by removing the Exchange and StableToken smart contracts from the Freezer contract's `isFrozen` map. \n\nAt a high level, the Celo stability mechanism (usually referred to as CP-DOTO, the Constant Product Decentralised One-To-One Mechanism) allows users to create new Celo Dollars by sending one US Dollar worth of CELO to the reserve, or to burn Celo Dollars by redeeming them for one US Dollar worth of CELO. The mechanism uses a constant-product-market-maker model, inspired by the Uniswap system, to mitigate the depletion potential of the reserve by dynamically adjusting the on-chain price to one-sided trading. For more background on the stability mechanism, please refer to the [Documentation](https://docs.celo.org/celo-codebase/protocol/stability).\n\n### Limiting initial on-chain liquidity:\n\nThe proposal also sets the exchange parameter reserveFraction to 0.1%. This value is chosen to limit the risk for the Celo reserve right after stability protocol activation, which is a period during which users are still setting up bots interacting with the stability mechanism and CELO/USD market liquidity is evolving.\n\nThe `reserveFraction` parameter allows to control the sensitivity of the on-chain CELO/cUSD price to one-sided trading via the exchange contract. The smaller this parameter, the smaller the resulting exchange mechanism uniswap-style tank sizes and therefore the larger the price reaction to one-sided trading. The benefit of setting a low `reserveFraction` of 0.1% initially is that this reduces the depletion potential of the reserve should there be imprecise CELO/USD oracle rates and/or manipulated CELO/USD market prices because the on-chain price adjusts quickly to one-sided trading. The downside is a reduced cUSD expansion and contraction potential and that, until this parameter is increased via a future governance proposal, only small trades with the exchange contract should be executed to avoid extensive slippage. \nFor more background on the effects of the reserveFraction parameter, please see the [Celo Stability Analysis](https://celo.org/papers/Celo_Stability_Analysis.pdf), especially sections 4.3.2 and 4.3.3.   \n\n## Proposed Changes\n\n1. Remove Exchange smart contract from the Freezer\n  - Destination: Freezer, [unfreeze](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/common/Freezer.sol#L27)\n  - Data: 0x67316300f17f063085Ca8bCa4bd3f7a5a3C66275 (Exchange Address)\n  - Value: 0 (NA)\n\n 2. Remove StableToken smart contract from the Freezer\n  - Destination: Freezer, [unfreeze](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/common/Freezer.sol#L27)\n  - Data: 0x765DE816845861e75A25fCA122bb6898B8B1282a (StableToken Address)\n  - Value: 0 (NA)\n\n3. Set Reserve Fraction to 0.1%\n  - Destination: Exchange, [setReserveFraction](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/stability/Exchange.sol#L240)\n  - Data: 1000000000000000000000 (1/1000 * 10^24 = 1e21) \n  - Value: 0 (NA)\n\n## Verification\n\n1. Confirm proposal steps: run `celocli governance:view --proposalID 7` // TODO add proposal ID once submitted proposal\n2. Confirm Exchange and StableToken addresses: run `celocli network:contracts`\n\n### Post-Execution Verification\n\n1. Check that an account can transfer cUSD to another account.  You can do so by running [celocli transfer:dollars](https://docs.celo.org/command-line-interface/transfer#dollars)\n2. Check that an account can exchange cUSD-for-CELO and CELO-for-cUSD.  You can do so by running [celocli exchange:dollars](https://docs.celo.org/command-line-interface/exchange#dollars) or [celocli exchange:gold](https://docs.celo.org/command-line-interface/exchange#gold)\n\n## Risks\n\n- Oracle rate risk: In case of imprecise CELO/USD oracle rates and/or manipulated CELO/USD market rates, users could exchange cUSD or CELO with the reserve at a price that does not reflect the current market valuation. This could negatively affect the reserve collateralization ratio and therefore long-term cUSD stability in two ways: First, a user could mint X cUSD while providing less than X USD worth of reserve collateral and second, a user could redeem Y cUSD for more than Y USD worth of reserve collateral. The major mitigant of this risk is the initial reduction of the `reserveFraction` parameter as explained in the overview section which comes at the cost of the risks described further below. Additional mitigants include oracle client features like a circuit breaker protecting against unreasonably large price movements. \n- On-chain liquidity risk: With a low `reserveFraction`, bigger trades with the exchange could lead to a significant slippage and therefore to losses of users who try to sell seizable amounts of cUSD and/or CELO to the reserve over a short period of time. Until the `reserveFraction` parameter is increased via a future governance proposal, only small trades with the exchange contract should be executed to avoid extensive slippage.\n- cUSD price risk: Due to the low initial `reserveFraction` parameter, the initial expansion and contraction potential of cUSD supply is low which could lead to slow adjustments of cUSD supply after cUSD demand shocks. The impact of this is that it could take longer for cUSD to regain the peg after an extensive cUSD demand shock compared to a setup with a large `reserveFraction` parameter.\n\n## Useful Links\n\n* [Stability WhitePaper](https://celo.org/papers/Celo_Stability_Analysis.pdf)\n* [The Celo Reserve FAQs](https://medium.com/celoorg/the-celo-reserve-faqs-f3f7cbb1991f). \n* [The Celo Expansion & Contraction Mechanism](https://medium.com/celoorg/zooming-in-on-the-celo-expansion-contraction-mechanism-446ca7abe4f)\n"
      },
      {
        "proposalID": 8,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": true,
        "queuedAtBlockNumber": 1418210,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1594665261,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0008.md",
        "title": "Increase the Reserve Fraction to Increase On-chain Liquidity",
        "description": "# CGP [0008]: Increase the Reserve Fraction to Increase On-chain Liquidity\n\n- Date: 2020-07-13\n- Author(s): @MarkusBerlin, @rcroessmann, @aslawson\n- Status: PROPOSED\n- Governance Proposal ID #: 8\n- Date Executed: [if executed]\n\n## Overview\n\nIncreasing the exchange parameter `reserveFraction` to 0.5% (from 0.1%): This change increases the on-chain cUSD/CELO liquidity by increasing the bucket-sizes in the Uniswap-style exchange mechanism.\n\nIn governance proposal [CGP0007](https://github.com/celo-org/celo-proposals/blob/master/CGPs/0007.md) that activated the Celo stability protocol, the `reserveFraction` parameter was set to a level of 0.1% to “[...] limit the risk for the Celo reserve right after stability protocol activation, which is a period during which users are still setting up bots interacting with the stability mechanism and CELO/USD market liquidity is evolving.”\n\nSince stability protocol activation, the oracle setup performed reliably, bots interacting with the stability mechanism got deployed and market liquidity has not changed significantly. On the basis of these developments, it is proposed to increase the `reserveFraction` parameter to 0.5%. Given the protocol state (CELO/USD median rate, unfrozen reserve CELO amount, etc.) at the time of creation of this proposal, this would reduce the slippage for instant sales of 1,000 Celo Dollars (cUSD) from about 3.75% to about 0.75%. The increased `reserveFraction` parameter would also increase the expansion and contraction potential of the stability mechanism and therefore speed-up adjustments of the cUSD supply after cUSD demand shocks.\n\nAn increase beyond 0.5% is currently not advisable as CELO/USD market liquidity is still low: Judging from current order books at centralized exchanges, buy orders of 10k CELO have an estimated market price impact of about 5%. To mitigate the risk of an off-chain price manipulation attack, the on-chain price reaction to large trades should be bigger than the off-chain price reaction to a market order of a similar size. This is the case with a 0.5% `reserveFraction` as a 10k CELO buy order would roughly lead to a 15% on-chain price movement which gives additional slack in case of changes of off-chain or on-chain liquidity related quantities. For more background on off-chain price manipulation attacks, please take a look at [Increasing Robustness of the Terra Oracle](https://agora.terra.money/uploads/short-url/i0qz8LDesetkgfBBFWas1HORDYb.pdf). \n\nMarket liquidity is related to demand for Celo currencies. If this demand increases, for example in response to pilot projects carried out by members of the Alliance for Prosperity, further increases of  `reserveFraction` may become advisable. \n\n\n## Proposed Changes\n\n1. Set Reserve Fraction to 0.5%\n  - Destination: Exchange, [setReserveFraction](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/stability/Exchange.sol#L240)\n  - Data: 5000000000000000000000 (5/1000 * 10^24 = 1e21) \n  - Value: 0 (NA)\n\n## Verification\n\n1. Confirm proposal steps: run `celocli governance:view --proposalID 8`\n2. Confirm Exchange and StableToken addresses: run `celocli network:contracts`\n\n\n## Risks\n\n- Oracle rate risk: In case of imprecise CELO/USD oracle rates and/or manipulated CELO/USD market rates, users could exchange cUSD or CELO with the reserve at a price that does not reflect the current market valuation. The increased `reserveFraction` parameter would lead to a larger loss of the reserve in such a case.\n\n## Useful Links\n\n* [Celo Reserve Website](https://celoreserve.org/)\n* [Stability WhitePaper](https://celo.org/papers/Celo_Stability_Analysis.pdf)\n* [The Celo Reserve FAQs](https://medium.com/celoorg/the-celo-reserve-faqs-f3f7cbb1991f). \n* [The Celo Expansion & Contraction Mechanism](https://medium.com/celoorg/zooming-in-on-the-celo-expansion-contraction-mechanism-446ca7abe4f)\n* [Increasing Robustness of the Terra Oracle](https://agora.terra.money/uploads/short-url/i0qz8LDesetkgfBBFWas1HORDYb.pdf)\n"
      },
      {
        "proposalID": 9,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": true,
        "queuedAtBlockNumber": 1436267,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1594755555,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0009.md",
        "title": "Extend the Governance Referendum Stage Duration",
        "description": "# CGP [0009]: Extend the Governance Referendum Stage Duration \n\n- Date: 2020-07-14\n- Author(s): @aslawson\n- Status: DRAFT\n- Governance Proposal ID #: [if submitted]\n- Date Executed: [if executed]\n\n## Overview\n\nThe on chain governance process has been running at an expedited rate in order to activate features and fine tune parameters in these early stages following the mainnet launch.  The original intent had been to start with this faster cadence and eventually slow it down.  In addition, the greater Celo community has expressed a desire to have more time to review, debate, and vote on proposals.\n\nThis proposal attempts to take the first step toward this process by extending the referendum (voting) stage by 3 days to a total of 5 days.  This will give stakeholders more time to review, voice concerns, and vote.  It will also increase the chance that all stages occur during the week, especially execution, as it results in a week-long total lifecycle. \n\nChanges in parameters:\n\n- stageDurations.referendum: 172800 (2 * DAY) --> 432000 (5 * DAY)\n\nwhere DAY (seconds/day) = 60 * 60 * 24 = 86400\n\nExample Proposal Timeline:\nMonday - Propose\nTuesday - Dequeued to Approval\nWednesday - Referendum (voting)\nThursday - Referendum (voting)\n--- Additional referendum time ---\nFriday - Referendum (voting)\nSaturday - Referendum (voting)\nSunday - Referendum (voting)\nMonday - Execute\n\nThis proposal is not intended to completely solve all cadence issues but as a step toward improvement.  Future steps may include altering the durations of other stages and/or even revisiting the entire lifecycle of a proposal holistically.  Please see [Governance 2.0 Ideas](https://docs.google.com/document/d/1_aLO9xnO6ho02BuFGTReuNsDWMEhDS4Omsc48CiN4O8/edit?usp=sharing) document to review ideas and contribute thoughts.\n\n## Proposed Changes\n\n1. Set Governance Referendum Stage Duration\n  - Destination: Governance, [setReferendumStageDuration](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/governance/Governance.sol#L308)\n  - Data: 432000\n  - Value: 0 (NA)\n\n## Verification\n\n1. Confirm proposal steps: run `celocli governance:view --proposalID X` //TODO update with proposal ID\n2. Confirm current stage durations via [getReferendumStageDuration](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/governance/Governance.sol#L7785)\n\n### Post-Execution Verification\n\n1. Run the celocli tool [governance:view](https://docs.celo.org/command-line-interface/governance#view) on a newly dequeued proposal and confirm that the `secondsUntilStages.expiration` is 777600 = 9 days (1 Approval + 5 Referendum + 3 Execution)\n2. Check Governance contract value via [getReferendumStageDuration](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/governance/Governance.sol#L7785)\n\n## Risks\n\n- If the times calculated are incorrect, there could be unexpected behavior in the referendum stage duration.\n\n## Useful Links\n\n* [Celo Gold Holders: Make Your Voice Heard Through On-chain Governance](https://medium.com/celoorg/celo-gold-holders-make-your-voice-heard-through-on-chain-governance-96cb5a1e8b90) -- blogpost with high level overview of governance stages\n* [Celo Docs - Governance](https://docs.celo.org/celo-codebase/protocol/governance) -- more in depth explanation of each phase\n"
      },
      {
        "proposalID": 10,
        "currentBlockNumber": 3055130,
        "stage": "Expiration",
        "proposer": "0xf3eb910da09b8af348e0e5b6636da442cfa79239",
        "executed": false,
        "queuedAtBlockNumber": 1678566,
        "deposit": 100000000000000000000,
        "queuedAtTimestamp": 1595967064,
        "gist": "https://github.com/celo-org/celo-proposals/blob/master/CGPs/0010.md",
        "title": "Bump Minimum Client Version",
        "description": "# CGP [00010P]: Bump Minimum Client Version\n\n- Date: 2020-07-20\n- Author(s): @mcortesi @aslawson\n- Status: DRAFT\n- Governance Proposal ID #: [if submitted]\n- Date Executed: [if executed]\n\n## Overview\n\n1.0.1 release fix a critical security vulnerability on the celo-blockchain node, thus it is important to upgrade the minimunClientVersion so that every participant upgrades their nodes.\n\n\nParameter Details:\n\nminimumClientVersion.major: 1 → 1 (unchanged)\nminimumClientVersion.minor: 0 → 0 (unchanged)\nminimumClientVersion.patch: 0 → 1\n\n## Proposed Changes\n\n1. Increase MinimumClientVersion in BlockchainParameters contract to 1.0.1\n  - Destination: BlockchainParameters, [setMinimumClientVersion](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/governance/BlockchainParameters.sol#L53)\n  - Data: major = 1, minor = 0, patch = 1\n  - Value: 0 (NA)\n\n\n## Verification\n\n1. Confirm proposal steps: run `celocli governance:view --proposalID X` // TODO add proposal ID once submitted proposal\n\n### Post-Execution Verification\n\n* Check that the `minimumClientVersion` parameters have been updated through [getMinimumClientVersion](https://github.com/celo-org/celo-monorepo/blob/de09a44f5ea2c2116506a6b3d05dcaaef92d4fad/packages/protocol/contracts/governance/BlockchainParameters.sol#L82)\n* Check that an geth client with a version lower than 1.0.1 returns an error\n\n## Risks\n\nBefore this proposal is executed at least ⅔ of the validators **must be** running 1.0.1 already. If not, the network would stall. At present time, this condition is already met.\n\n## Useful Links\n\n\n\n\n\n\n"
      }
    ]
  }
}
