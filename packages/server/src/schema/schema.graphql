type Query {
  # Cosmos APIs
  portfolioHistory(address: String!, fiat: String!): PortfolioData!
  fiatPriceHistory(fiat: String!, network: String!): [FiatPrice!]!
  dailyPercentChange(currency: String!, fiat: String!): String!
  accountBalances(address: String!): AccountBalanceResponseType!
  rewardsByValidator(address: String!): [AvailableReward!]!
  accountInformation(address: String!): AccountInformation!
  cosmosTransaction(hash: String!, network: String!): CosmosTransaction!
  cosmosTransactions(
    address: String!
    startingPage: Float
    pageSize: Float
  ): TransactionsPaginationResult!
  validatorDistribution(validatorAddress: String!): ValidatorDistribution!
  validators(network: String!): [Validator!]!
  validatorSets(network: String!): ValidatorSet!
  latestBlock(network: String!): BlockData!
  stakingPool(network: String!): StakingPool!
  stakingParameters(network: String!): StakingParameters!
  governanceProposals(network: String!): [GovernanceProposal!]!
  governanceParametersDeposit(network: String!): GovernanceParametersDeposit!
  governanceParametersTallying(network: String!): GovernanceParametersTallying!
  governanceParametersVoting(network: String!): GovernanceParametersVoting!
  slashingParameters(network: String!): SlashingParameters!
  distributionCommunityPool(network: String!): [Balance!]!
  distributionParameters(network: String!): DistributionParameters!

  fiatCurrencies: [FiatCurrency!]!
  prices(currency: String!, versus: String!): Price!

  # Oasis APIs
  oasisAccountHistory(address: String!, fiat: String!): [OasisAccountHistory!]!
  oasisTransactions(
    address: String!
    startingPage: Float
    pageSize: Float
  ): OasisTransactionResult!
  oasisTransaction(hash: String!): OasisTransaction!

  # Celo APIs
  celoAccountHistory(address: String!, fiat: String!): [CeloAccountSnapshot!]!
  celoTransactions(
    address: String!
    startingPage: Float
    pageSize: Float
  ): CeloTransactionResult!
  celoTransaction(hash: String!): CeloTransaction!
  celoSystemBalances: CeloSystemBalances!
  celoSystemHistory: [CeloSystemHistory!]!
  celoValidatorGroups: [CeloValidatorGroup!]!
}

# *****************************************************************************
# Shared Untion Types

union AccountBalanceResponseType =
    CosmosAccountBalancesType
  | CeloAccountBalancesType
  | OasisAccountBalancesType

# *****************************************************************************
# Celo APIs

type CeloAccountBalancesType {
  celo: CeloAccountBalances!
}

type CeloAccountBalances {
  address: String!
  height: String!
  availableGoldBalance: String!
  totalLockedGoldBalance: String!
  nonVotingLockedGoldBalance: String!
  votingLockedGoldBalance: String!
  pendingWithdrawalBalance: String!
  celoUSDValue: String!
  delegations: [CeloDelegation!]!
}

type CeloDelegation {
  group: String!
  totalVotes: String!
  activeVotes: String!
  pendingVotes: String!
}

type CeloAccountSnapshot {
  snapshotDate: String!
  address: String!
  height: String!
  snapshotReward: String!
  availableGoldBalance: String!
  totalLockedGoldBalance: String!
  nonVotingLockedGoldBalance: String!
  votingLockedGoldBalance: String!
  pendingWithdrawalBalance: String!
  celoUSDValue: String!
  delegations: [CeloDelegation!]!
}

type CeloTransactionResult {
  page: Float!
  limit: Float!
  data: [CeloTransaction!]!
  moreResultsExist: Boolean!
}

type CeloTransaction {
  blockNumber: Int!
  timestamp: String!
  hash: String!
  from: String
  to: String
  details: CeloTransactionDetails!
  tags: [CeloTransactionTags!]!
}

type CeloTransactionTags {
  eventname: String!
  source: String!
  parameters: String!
}

type CeloTransactionDetails {
  nonce: Float!
  gasLimit: Float!
  gasPrice: Float!
  gasUsed: Float!
  feeCurrency: String
  gatewayFeeRecipient: String
  gatewayFee: Float!
  to: String!
  value: Float!
}

type CeloSystemBalances {
  height: String!
  goldTokenSupply: String!
  totalLockedGoldBalance: String!
  nonVotingLockedGoldBalance: String!
  totalCeloUSDValue: String
}

type CeloSystemHistory {
  BlockNumber: String!
  SnapshotDate: String!
  GoldTokenSupply: String!
  TotalLockedGoldBalance: String!
  NonVotingLockedGoldBalance: String!
  TotalCeloUSDValue: String!
}

type CeloValidatorGroup {
  group: String!
  name: String!
  metadataURL: String!
  blockNumber: Float!
  votingPower: Float!
  votingPowerFraction: String!
  capacityAvailable: Float!
  totalCapacity: Float!
  multiplier: Float!
  groupShare: Float!
  validatorAddresses: [String!]!
}

# *****************************************************************************
# Oasis APIs

type OasisAccountBalancesType {
  oasis: OasisAccountBalances!
}

type OasisAccountBalances {
  available: String!
  staked: OasisBalance!
  unbonding: OasisBalance!
  rewards: String! # Not available yet
  commissions: String! # Not available yet
  meta: OasisAccountMeta!
  delegations: [OasisDelegation!]
}

type OasisAccountHistory {
  date: String!
  height: String!
  address: String!
  balance: String!
  meta: OasisAccountMeta!
  delegations: [OasisDelegation!]
}

type OasisDelegation {
  delegator: String!
  validator: String!
  amount: String!
}

type OasisBalance {
  balance: String!
  shares: String!
}

type OasisAccountMeta {
  is_validator: Boolean!
  is_delegator: Boolean!
}

type OasisTransactionResult {
  page: Float!
  limit: Float!
  data: [OasisTransaction!]!
  moreResultsExist: Boolean!
}

type OasisTransaction {
  fee: String!
  gas: Int!
  gas_price: String!
  height: Int!
  method: String!
  date: String!
  sender: String!
  data: OasisTransactionData!
}

enum OasisTransactionType {
  BURN
  TRANSFER
  ESCROW_ADD
  ESCROW_TAKE
  ESCROW_RECLAIM
  REGISTER_ENTITY
  REGISTER_NODE
  UNFREEZE_NODE
  REGISTER_RUNTIME
  RATE_EVENT
  BOUND_EVENT
  AMEND_COMMISSION_SCHEDULE
  UNKNOWN_EVENT
}

union OasisTransactionData =
    OasisBurnEvent
  | OasisTransferEvent
  | OasisEscrowAddEvent
  | OasisEscrowTakeEvent
  | OasisEscrowReclaimEvent
  | OasisRegisterEntityEvent
  | OasisRegisterNodeEvent
  | OasisUnfreezeNodeEvent
  | OasisRegisterRuntimeEvent
  | OasisRateEvent
  | OasisBoundEvent
  | OasisAmendCommissionScheduleEvent
  | OasisUnknownEvent

type OasisTransferEvent {
  type: OasisTransactionType!
  from: String!
  to: String!
  tokens: String!
}

type OasisBurnEvent {
  type: OasisTransactionType!
  owner: String!
  tokens: String!
}

type OasisEscrowAddEvent {
  type: OasisTransactionType!
  to: String!
  tokens: String!
}

type OasisEscrowTakeEvent {
  type: OasisTransactionType!
  from: String!
  to: String!
  tokens: String!
}

type OasisEscrowReclaimEvent {
  type: OasisTransactionType!
  from: String!
  shares: String!
}

type OasisRegisterEntityEvent {
  type: OasisTransactionType!
  id: String!
  nodes: [String!]!
  allow_entity_signed_nodes: Boolean!
}

type OasisRegisterNodeEvent {
  type: OasisTransactionType!
  id: String!
  entity_id: String!
  expiration: Float!
}

type OasisUnfreezeNodeEvent {
  type: OasisTransactionType!
  id: String!
}

type OasisRegisterRuntimeEvent {
  type: OasisTransactionType!
  id: String!
  version: String!
}

type OasisRateEvent {
  type: OasisTransactionType!
  start: String!
  rate: String!
}

type OasisBoundEvent {
  type: OasisTransactionType!
  start: String!
  rate_min: String!
  rate_max: String!
}

type OasisAmendCommissionScheduleEvent {
  type: OasisTransactionType!
  rates: [String!]
  bounds: [String!]
}

type OasisUnknownEvent {
  type: OasisTransactionType!
  method_name: String!
}

# *****************************************************************************
# Cosmos APIs

type PortfolioReward {
  balance: String!
  height: Int!
  address: String!
  timestamp: String!
}

type PortfolioCommission {
  balance: String!
  height: Int!
  validator: String!
  timestamp: String!
}

type PortfolioDelegation {
  balance: String!
  address: String!
  timestamp: String!
}

type PortfolioBalance {
  address: String!
  denom: String!
  balance: String!
  height: Int!
  timestamp: String!
  chain: String!
}

type FiatPrice {
  price: Float!
  timestamp: String!
}

type PortfolioData {
  balanceHistory: [PortfolioBalance!]!
  delegations: [PortfolioDelegation!]!
  unbondings: [PortfolioDelegation!]!
  delegatorRewards: [PortfolioReward!]!
  validatorCommissions: [PortfolioCommission!]!
  fiatPriceHistory: [FiatPrice!]!
}

type AvailableReward {
  reward: [Balance!]
  validator_address: String!
}

type CosmosAccountBalancesType {
  cosmos: CosmosAccountBalances!
}

type CosmosAccountBalances {
  balance: [Balance!]
  rewards: [Balance!]
  delegations: [Delegation!]
  unbonding: [UnbondingDelegation!]
  commissions: [Balance!]
}

type Balance {
  denom: String!
  amount: String!
}

type Delegation {
  delegator_address: String!
  validator_address: String!
  shares: String!
}

type UnbondingDelegation {
  delegator_address: String!
  validator_address: String!
  entries: [UnbondingDelegationEntry!]!
}

type UnbondingDelegationEntry {
  balance: String!
  initial_balance: String!
  creation_height: String!
  completion_time: String!
}

type AccountInformation {
  type: String!
  value: Account!
}

type Account {
  account_number: String!
  address: String!
  coins: [AccountCoin!]
  public_key: PubKey
  sequence: String!
}

type AccountCoin {
  denom: String!
  amount: String!
}

type TransactionsPaginationResult {
  page: Float!
  limit: Float!
  data: [CosmosTransaction!]!
  moreResultsExist: Boolean!
}

type CosmosTransaction {
  hash: String!
  height: String!
  log: [LogMessage]!
  gaswanted: String!
  gasused: String!
  memo: String
  fees: TxFee!
  tags: [Tag!]
  msgs: [TxMsg!]!
  timestamp: String!
  chain: String!
}

type LogMessage {
  code: Int
  message: String
  success: Boolean
  log: String
  msg_index: String
}

type Tag {
  key: String!
  value: String
}

type Tx {
  type: String!
  value: TxValue!
}

type TxValue {
  fee: TxFee!
  memo: String!
  msg: [TxMsg!]
  signatures: [TxSignature!]
}

type TxFee {
  amount: [Balance!]
  gas: String!
}

type TxMsg {
  type: String!
  value: TxMsgValue
}

# Could collapse this into a single type with all optional fields:
union TxMsgValue =
    MsgSend
  | MsgVote
  | MsgDelegate
  | MsgSubmitProposal
  | MsgBeginRedelegate
  | MsgModifyWithdrawAddress
  | MsgBeginRedelegateLegacy
  | MsgWithdrawDelegationReward
  | MsgWithdrawValidatorCommission

type MsgSend {
  amounts: [Balance!]
  to_address: String
  from_address: String
}

type MsgDelegate {
  amount: Balance!
  delegator_address: String
  validator_address: String
}

type MsgSubmitProposal {
  title: String!
  description: String!
  proposal_type: String!
  proposer: String!
  initial_deposit: [Balance!]
}

type MsgBeginRedelegate {
  amount: Balance!
  delegator_address: String
  validator_src_address: String!
  validator_dst_address: String!
}

type MsgBeginRedelegateLegacy {
  shares_amount: String!
  delegator_address: String
  validator_src_address: String!
  validator_dst_address: String!
}

type MsgModifyWithdrawAddress {
  withdraw_address: String
  validator_address: String
}

type MsgWithdrawDelegationReward {
  delegator_address: String
  validator_address: String
}

type MsgWithdrawValidatorCommission {
  validator_address: String
}

type MsgVote {
  proposal_id: String!
  voter: String!
  option: String!
}

type TxSignature {
  pub_key: PubKey!
  signature: String!
}

type PubKey {
  type: String!
  # value: String!
}

# NOTE: The PubKey `value` is a union type but union types options
# must be object values:

# union PubKeyValue = String | PubKeyList

# type PubKeyList {
#   threshold: String!
#   pubkeys: [PubKey!]
# }

type ValidatorDistribution {
  operator_address: String!
  self_bond_rewards: [Balance!]
  val_commission: [Balance!]
}

type Validator {
  operator_address: String!
  consensus_pubkey: String!
  jailed: Boolean!
  status: Int!
  tokens: String!
  delegator_shares: String!
  description: ValidatorDescription!
  unbonding_height: String!
  unbonding_time: String!
  commission: ValidatorCommission!
  min_self_delegation: String!
}

type ValidatorDescription {
  moniker: String!
  identity: String!
  website: String!
  details: String!
}

type ValidatorCommission {
  update_time: String!
  commission_rates: CommissionRates!
}

type CommissionRates {
  rate: String!
  max_rate: String!
  max_change_rate: String!
}

type ValidatorSet {
  block_height: Int!
  validators: [ValidatorSetItem!]
}

type ValidatorSetItem {
  address: String!
  pub_key: String!
  voting_power: String!
  proposer_priority: String!
}

type BlockData {
  block: Block!
}

type Block {
  header: BlockHeader!
}

type BlockHeader {
  chain_id: String!
  height: String!
  time: String!
  num_txs: String!
  total_txs: String!
  last_commit_hash: String!
  data_hash: String!
  validators_hash: String!
  next_validators_hash: String!
  consensus_hash: String!
  app_hash: String!
  last_results_hash: String!
  evidence_hash: String!
  proposer_address: String!
}

type StakingPool {
  loose_tokens: String
  bonded_tokens: String
  not_bonded_tokens: String
  inflation_last_time: String
  inflation: String
  date_last_commission_reset: String
  prev_bonded_shares: String
}

type StakingParameters {
  inflation_rate_change: String
  inflation_max: String
  inflation_min: String
  goal_bonded: String
  unbonding_time: String!
  max_validators: Int!
  max_entries: Int!
  bond_denom: String!
}

type GovernanceProposal {
  proposal_id: Int
  title: String
  description: String
  proposal_type: String
  proposal_status: String!
  final_tally_result: TallyResult!
  submit_time: String!
  total_deposit: [Balance!]
  voting_start_time: String!
}

type TallyResult {
  yes: String!
  abstain: String!
  no: String!
  no_with_veto: String!
}

type GovernanceParametersDeposit {
  min_deposit: [Balance!]
  max_deposit_period: String!
}

type GovernanceParametersTallying {
  threshold: String!
  veto: String!
  governance_penalty: String
}

type GovernanceParametersVoting {
  voting_period: String!
}

type SlashingParameters {
  max_evidence_age: String!
  signed_blocks_window: String!
  min_signed_per_window: String!
  double_sign_unbond_duration: String
  downtime_unbond_duration: String
  slash_fraction_double_sign: String!
  slash_fraction_downtime: String!
}

type DistributionParameters {
  base_proposer_reward: String!
  bonus_proposer_reward: String!
  community_tax: String!
}

type Price {
  price: Float!
}

type FiatCurrency {
  name: String!
  symbol: String!
}
